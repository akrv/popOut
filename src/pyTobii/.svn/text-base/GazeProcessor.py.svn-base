# -*- coding: iso-8859-15 -*-
'''
Created on 11.11.2010

@author: oskar
'''

from Disc import Disc
import math
import pickle
import pyTetClient
import pyTobii
import tobiiConfiguration
import viz
import copy
import vizinput


class GazeProcessor(viz.EventClass):
    FIXPOINT_EVENT        = viz.getEventID('FixPoint_Event')
    def __init__(self):
        viz.EventClass.__init__(self)
        self.__openDataName     = ""
        self.__outPickle        = None      #datei für die pickle ausgabe
        self.__outPlain         = None      #datei für plaintext ausgabe
        self.__lastTrigger      = -1        #damit nur änderungen der trigger geschrieben werden
        self.__dataCount        = 0         #zähler
        self.__lastStoreTime    = 0         #viz.tick() der letzten speicherung des buffers
        self.__dataSaveIntervall= tobiiConfiguration.dataSaveIntervall  #intervall in dem der buffer gespeichert werden soll
        self.__buffer           = []        #buffer aller daten
        self.__buffersize       = tobiiConfiguration.gazeProcessorBuffersize
        self.__waitForFixation  = None      #wird gesetzt, sobald gewartet wird
        self.__waitForFixationEntryTime = 0 #wird gesetzt sobald der punkt anvisiert wurde
        self.__showGazePoint    = False
        self.__dataIndex        = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]] #zählt auf wie oft jeder fehlercode für die datenerfassung vorkam (links, rechts)
        
        #erstelle die 3 discs zur anzeige des punktes
        self.__discAvg = Disc()
        self.__discAvg.translate(0, 0, tobiiConfiguration.screenDistance)
        self.__discAvg.visible(False)
        self.__discLeft = self.__discAvg.copy()
        self.__discLeft.color((0,1,0))
        self.__discRight = self.__discAvg.copy()
        self.__discRight.color((1,0,0))
        
        self.callback(pyTetClient.VizEventSink.OnGazeData, self.__onGazeData)
        self.callback(viz.EXIT_EVENT, self.__closeFiles())
        self.__storing = False
        
    
    def __openFiles(self):
        '''Öffnet die Ausgabedateien.'''
        self.__openDataName = str(pyTobii.getDataName())
        if not self.__openDataName: return
        self.__outPickle = open(self.__openDataName + ".pic", "wb") 
        self.__outPlain = open(self.__openDataName + ".tob", "w") 
        self.__outPlain.write("time, trigger, leftValidity, rightValidity, leftX, leftY, rightX, rightY\n")
        self.__outPlain.flush()
        self.__dataIndex        = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
        
    
    def __closeFiles(self):
        '''Schließt die Ausgabedateien.'''
        try:
            self.__outPickle.dump() 
            self.__outPickle.close() 
        except: pass
        try:
            self.__outPlain.dump()
            self.__outPlain.close()
        except: pass
        self.__outPickle = None 
        self.__outPlain = None
    
    
    def checkErrors(self):
        '''Prüft ob die anzahl nicht erkannter rechter oder linker augen über einem Schwellwert liegt und sendet einen Fehler.'''
        dataSum = sum(self.__dataIndex[0]) + sum(self.__dataIndex[1])
        errorSum = self.__dataIndex[0][4] + self.__dataIndex[1][4]
        print "errordata: %s, dataSum: %i, errorSum: %i" % (str(self.__dataIndex), dataSum, errorSum)
        if dataSum > 0 and float(errorSum) / float(dataSum) > 0.5:
            viz.message("ACHTUNG: Tobii liefert eventuell falsche Daten!")
        
    
    def updateFilename(self):
        '''Falls sich der Ausgabename geändert hat, werden die Dateien entsprechend verändert.'''
        newName = str(pyTobii.getDataName())
        if newName == self.__openDataName or not self.__outPickle: return   #wenn noch nix geöffnet wurde, nix machen
        
        self.__storeData()
        self.__closeFiles()
        #open wird beim nächsten speicheraufruf ausgeführt
        
        
    def showGazePoint(self):
        '''Zeigt den betrachteten Punkt auf dem Bildschirm.'''
        self.__discAvg.visible(True)
        self.__discLeft.visible(True)
        self.__discRight.visible(True)
        self.__showGazePoint = True

    
    def hideGazePoint(self):
        '''Versteckt den betrachteten Punkt auf dem Bildschirm.'''
        self.__discAvg.visible(False)
        self.__discLeft.visible(False)
        self.__discRight.visible(False)
        self.__showGazePoint = False

    
    def setTrigger(self, triggerNum):
        '''Setzt einen Trigger für die Ausgabedateien.'''
        if triggerNum == self.__lastTrigger: return
        self.__lastTrigger = triggerNum
        trigger = viz.tick(), triggerNum
        #self.__buffer.append(trigger)

        
    def setBuffersize(self, buffsize):
        '''Setzt die Puffergröße neu.'''
        self.__buffersize = buffsize
        firstPos = len(self.__buffer) - self.__buffersize
        if firstPos > 0:
            self.__buffer = self.__buffer[firstPos:]
    
    
    def getCurrentPoint(self):
        '''Gibt die aktuellste Gazedata zurück.'''
        return self.__buffer[-1]
    
    
    def getAvgFromLastXSeconds(self, seconds):
        '''Gibt den durchschnittlichen Blickpunkt der letzten X Sekunden wieder.'''
        count = 50 * seconds
        return self.getAvgFromLastXEntries(count)


    def getAvgFromLastXEntries(self, count):
        '''Berechnet den Durchschnittlichen Blickpunkt der letzten X Einträge.'''
        entries = self.__buffer[-count:]
        
        lxSum = lySum = 0
        rxSum = rySum = 0
        for entry in entries:
            tick, data = entry
            if data.validity_lefteye == 4 or data.validity_righteye == 4:
                continue    #TODO: überlegen ob nicht zu viel verworfen wird

            lxSum += data.x_gazepos_lefteye 
            lySum += data.y_gazepos_lefteye 
            rxSum += data.x_gazepos_righteye 
            rySum += data.y_gazepos_righteye
        
        lxAvg = lxSum / count 
        lyAvg = lySum / count 
        rxAvg = rxSum / count 
        ryAvg = rySum / count
        return (lxAvg, lyAvg), (rxAvg, ryAvg) 


    def registerFixationEvent(self, point, tolerance, duration):
        '''Ermöglicht das Warten auf die Fixation eines Punktes 'point' mit Toleranzradius 'tolerance' für den Zeitraum 'duration'.'''
        self.__waitForFixation = point, tolerance, duration
        
    
    def __storeData(self):
        '''Schreibt die im Puffer seit der letzten speicherung angesammelten Daten in die Ausgabedateien.'''
        startItem = -1
        for i, entry in enumerate(self.__buffer):
            if entry[0] > self.__lastStoreTime:
                startItem = i
                break
        
        if startItem == -1:
            print "no gazedata to store!"
            return
        
        if not self.__outPickle:
            self.__openFiles()  #öffne jetzt erst die ausgabedateien, um nicht schon bei programmstart alles zu überschreiben
        if not self.__outPickle:
            return
        
        #nimm nur die neuen, noch nicht gespeicherten daten
        toStore = self.__buffer[startItem:]
        pickle.dump(toStore, self.__outPickle, -1)
        self.__outPickle.flush()

        #formatierung für plaintext ausgabe
        for entry in toStore:
            tick, data = entry
            if isinstance(data, int):#trigger
                plainTextData = "%f, %i\n" % (tick, data)
            else:#alles andere
                vl = data.validity_lefteye
                vr = data.validity_righteye
                lx = data.x_gazepos_lefteye 
                ly = data.y_gazepos_lefteye 
                rx = data.x_gazepos_righteye 
                ry = data.y_gazepos_righteye
                
                lx, ly = pyTetClient.tobiiToVizCoord(lx, ly)
                rx, ry = pyTetClient.tobiiToVizCoord(rx, ry)
                
                plainTextData = "%f %i %i %i %f %f %f %f\n" % (round(tick, 3), self.__lastTrigger, vl, vr, lx, ly, rx, ry) 
                self.__dataIndex[0][vl] += 1
                self.__dataIndex[1][vr] += 1
            self.__outPlain.write(plainTextData)
        
        self.__outPlain.flush()
        self.__lastStoreTime = self.__buffer[-1][0] #speichere die zeit
        
        
    def __onGazeData(self, event):
        '''
        Wird aufgerufen, wenn der Tobii neue Daten errechnet und rausgeschickt hat.
        Diese Daten werden im Buffer gespeichert.
        '''
        self.__dataCount += 1
        data = event.data
        
        if len(self.__buffer) >= self.__buffersize:
            self.__buffer.pop(0)
        self.__buffer.append((viz.tick(), data))

        if self.__storing:
            print "\n\nomg storing\n\n", viz.tick()
        if viz.tick() - self.__lastStoreTime > self.__dataSaveIntervall:
            self.__storing = True
            self.__storeData()
            self.__storing = False
        
        lx = data.x_gazepos_lefteye 
        ly = data.y_gazepos_lefteye 
        rx = data.x_gazepos_righteye 
        ry = data.y_gazepos_righteye
        
        lx, ly = pyTetClient.tobiiToVizCoord(lx, ly)
        rx, ry = pyTetClient.tobiiToVizCoord(rx, ry)
        
        avgX = (lx + rx) / 2
        avgY = (ly + ry) / 2
        

        if self.__showGazePoint:
            #passe posi der discs an
            print "lx:%f\tly:%f\trx:%f\try:%f" % (lx, ly, rx, ry)
            self.__discAvg.translate(avgX, avgY, tobiiConfiguration.screenDistance)
            self.__discLeft.translate(lx, ly, tobiiConfiguration.screenDistance)
            self.__discRight.translate(rx, ry, tobiiConfiguration.screenDistance)
        
    
        if self.__waitForFixation:
            point, tolerance, duration = self.__waitForFixation
            
            #berechne abstände
            distX = abs(point[0] - avgX)
            distY = abs(point[1] - avgY)
            
            distanceToPoint = math.sqrt(distX**2 + distY**2)
            
            if distanceToPoint < tolerance:
                #im fixationsradius... farbe ändern und schauen ob fixationszeit der duration entspricht
                self.__discAvg.color((0,0,1))
                if viz.tick() - self.__waitForFixationEntryTime >= duration:
                    self.__waitForFixation = None
                    viz.sendEvent(self.FIXPOINT_EVENT, viz.Event())
            else:
                #nicht im radius, eintrittszeit anpassen
                self.__waitForFixationEntryTime = viz.tick()
                self.__discAvg.color((1,1,1))
                
    
if __name__ == '__main__':
    gp = GazeProcessor(10)
    gp.setBuffersize(30)