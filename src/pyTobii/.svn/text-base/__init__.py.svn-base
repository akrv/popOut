# -*- coding: iso-8859-15 -*-
'''
Created on 09.11.2010

@author: Oskar
'''

from GazeProcessor import GazeProcessor
from Menu import Menu
from pyTobiiCalibrationVisualizer import PyTobiiCalibrationVisualizer
from pyTobiiCalibrator import pyTobiiCalibrator
from pyTobiiCameraVisualisation import PyTobiiCameraVisualisation
import os
import pickle
import pyTetClient
import time
import tobiiConfiguration
import viz
import viztask


_dataName       = ""
_tc             = None
_calibrator     = None
_eventSink      = None
_gazeProcessor  = None
_menu           = None
_calibVisualizer= None
_camVisualizer  = None
_isTracking     = False
_isShowingGaze  = False
_isShowingCamera= False
_isShowingCalibrationResultPoints = False
_isShowingCalibrationResultNet = False
_hwManager      = None


def init(configuration, filename = "", hwManager = None):
    '''Initialisiert die nötigen Klassen.'''
    global _tc, _calibrator, _eventSink, _gazeProcessor, _menu, _calibVisualizer, _camVisualizer, _dataName, _hwManager
    
    _dataName = filename
    
    tobiiConfiguration.windowResolution         = configuration.windowResolution     
    tobiiConfiguration.monitorVerticalSize      = configuration.monitorVerticalSize  
    tobiiConfiguration.monitorHorizontalSize    = configuration.monitorHorizontalSize
    tobiiConfiguration.screenDistance           = configuration.screenDistance       
    tobiiConfiguration.calibPosis               = configuration.calibPositions
    
    #event verarbeitung
    _eventSink = pyTetClient.VizEventSink()
    
    #tetclient
    _tc = pyTetClient.pyTetClient(_eventSink)
    _tc.Connect(*tobiiConfiguration.connection)
    
    #hwmanager
    _hwManager = hwManager
    
    #kalibrierung
    _calibrator = pyTobiiCalibrator(_tc, _hwManager)
    #kalibrierungsauswertung
    _calibVisualizer = PyTobiiCalibrationVisualizer(_tc)
    #anzeige der cam
    _camVisualizer =  PyTobiiCameraVisualisation(_tc)
    
    #blickdaten verarbeitung
    _gazeProcessor = GazeProcessor()
    
    #menü
    _menu = Menu()
    
    #beim beenden von viz alles schließen
    viz.callback(viz.EXIT_EVENT, kill)


def setDataName(name):
    '''Setzt den Namen für alle Ausgaben (ohne Erweiterung).'''
    global _dataName
    path = viz.getOption('viz.publish.path','.')+'/Data/'       #dateipfad herausfinden
    if not os.path.isdir(path):
        os.mkdir(path)
    
    _dataName = path + name
    _gazeProcessor.updateFilename()


def checkForErrors():
    _gazeProcessor.checkErrors()
    

def getDataName():
    '''Gibt den Namen für alle Ausgaben zurück (ohne Erweiterung).'''
    return _dataName


def isTracking():
    '''Gibt zurück, ob Tobii gerade die Augen trackt.'''
    return _isTracking


def isShowingGaze():
    '''Gibt zurück, ob der Gazepoint gerade angezeigt wird.'''
    return _isShowingGaze


def isShowingCamera():
    '''Gibt zurück, ob die Kameradaten gerade angezeigt werden.'''
    return _isShowingCamera


def isShowingCalibrationResultPoints():
    '''Gibt zurück, ob die Ergebnisse der Kalibrierung gerade als Punkte angezeigt werden.'''
    return _isShowingCalibrationResultPoints


def isShowingCalibrationResultNet():
    '''Gibt zurück, ob die Ergebnisse der Kalibrierung gerade als Netz angezeigt werden.'''
    return _isShowingCalibrationResultNet


def startTracking():
    '''Beginnt mit dem Tracking.'''
    global _isTracking
    _isTracking = True
    _tc.StartTracking()
    _gazeProcessor.updateFilename()


def stopTracking():
    '''Stoppt das Tracking.'''
    global _isTracking
    _isTracking = False
    _tc.StopTracking()
    _gazeProcessor.updateFilename()


def kill():
    '''Beendet alle Tobii-Prozesse.'''
    _tc.stopEventProcessing()
    
        
def calibrate(points = None, perfect = False, filename = ""):
    '''
    Startet den Kalibrierungsvorgang.
    Als Parameter müssen alle gewünschten Punkte in einer Liste übergeben werden, sonst wird die Config genutzt. ((x1,y1), (x2,y2))
    Falls 'perfect = True' übergeben wird, wird der Kalibrierungsvorgang solange bei fehlerhaften Punkten wiederholt, bis diese erfasst wurden.
    '''
    #zum kalibrieren das tracking stoppen
    wastracking = isTracking()
    wasShowingDiscs = isShowingCalibrationResultPoints()
    wasShowingNet = isShowingCalibrationResultNet()
    if wastracking:
        stopTracking()
    
    if not points: points = tobiiConfiguration.calibPosis
    #viz.directormode(viz.DIRECTOR_FAST) #siehe http://forum.worldviz.com/showthread.php?t=1355&highlight=event
    #alte kalibrierung entfernen
    _calibrator.clearCalibration()
    if not filename:
        filename = str(_dataName) + ".cal"

    path = viz.getOption('viz.publish.path','.')+'/Data/'       #dateipfad herausfinden
    if not os.path.isdir(path):
        os.mkdir(path)
    filename = path + filename
    
    prevScene = viz.MainView.getScene()
    viz.scene(tobiiConfiguration.calibrationScene)

    #viz.director(_calibrator.calibrate, [points[4]], filename, fake = True)
    yield _calibrator.calibrate([points[4]], filename, fake = True)
    #yield viztask.waitTime(1)           #warte bis calib angefangen hat
    while _calibrator.isCalibrating():  #warte bis sie fertig ist
        yield viztask.waitFrame(1)

    while True:
        yield _calibrator.calibrate(points, filename)
        #yield viztask.waitTime(1)           #warte bis calib angefangen hat
        while _calibrator.isCalibrating():  #warte bis sie fertig ist
            yield viztask.waitFrame(1)
        
        points = _calibrator.getMissingPoints(points, filename)
        if not perfect or not points:       #sollen alle punkte abgedeckt werden und sind welche über, widerhole mit diesen punkten
            break
    viz.scene(prevScene)
    
    #starte das tracking wieder, falls es vorher schon lief
    if wastracking:
        startTracking()
    if wasShowingDiscs:
        if isinstance(wasShowingDiscs, bool): wasShowingDiscs = None
        showCalibrationResultPoints(wasShowingDiscs)
    if wasShowingNet:
        if isinstance(wasShowingNet, bool): wasShowingNet = None
        showCalibrationResultNet(wasShowingNet)


def showCalibrationResultPoints(filename = None):
    '''
    Zeigt das Ergebnis der letzten Kalibrierung in Punkten.
    Falls ein Dateiname übergeben wird, wird diese Kalibrierung geladen.
    '''
    global _isShowingCalibrationResultPoints
    if filename:
        path = viz.getOption('viz.publish.path','.')+'/Data/'       #dateipfad herausfinden
        if not os.path.isdir(path):
            os.mkdir(path)
        filename = path + filename

    _isShowingCalibrationResultPoints = filename or True
    wastracking = isTracking()
    if not filename and wastracking:
        stopTracking()
    _calibVisualizer.showResultPoints(filename)
    if wastracking:
        startTracking()


def hideCalibrationResultPoints():
    '''Versteckt das Ergebnis der letzten Kalibrierung.'''
    global _isShowingCalibrationResultPoints
    _isShowingCalibrationResultPoints = False
    _calibVisualizer.hideResultPoints()


def showCalibrationResultNet(filename = None):
    '''
    Zeigt das Ergebnis der letzten Kalibrierung als Netz.
    Falls ein Dateiname übergeben wird, wird diese Kalibrierung geladen.
    '''
    global _isShowingCalibrationResultNet
    if filename:
        path = viz.getOption('viz.publish.path','.')+'/Data/'       #dateipfad herausfinden
        if not os.path.isdir(path):
            os.mkdir(path)
        filename = path + filename

    _isShowingCalibrationResultNet = filename or True
    wastracking = isTracking()
    if not filename and wastracking:
        stopTracking()
    _calibVisualizer.showResultNet(filename)
    if wastracking:
        startTracking()


def hideCalibrationResultNet():
    '''Versteckt das Ergebnis der letzten Kalibrierung.'''
    global _isShowingCalibrationResultNet
    _isShowingCalibrationResultNet = False
    _calibVisualizer.hideResultNet()


def showCameraPoint():
    '''Zeigt die Augen aus der Sicht der Kamera.'''
    global _isShowingCamera
    _isShowingCamera = True
    if not isTracking():
        startTracking()
    _camVisualizer.show()    


def hideCameraPoint():
    '''Versteckt die Augen aus der Sicht der Kamera.'''
    global _isShowingCamera
    _isShowingCamera = False
    _camVisualizer.hide()    

    
def showGazePoint():
    '''Zeigt den aktuell betrachteten Punkt auf dem Bildschirm.'''
    global _isShowingGaze
    if not isTracking():
        startTracking()
    _isShowingGaze = True
    _gazeProcessor.showGazePoint()
    
    
def hideGazePoint():
    '''Versteckt den aktuell betrachteten Punkt auf dem Bildschirm.'''
    global _isShowingGaze
    _isShowingGaze = False
    _gazeProcessor.hideGazePoint()
    

def showMenu():
    '''Zeigt das Menü an.'''
    _menu.show()
    
    
def hideMenu():
    '''Versteckt das Menü.'''
    _menu.hide()
    
    
def waitForPointFixation(point, toleranceradius, duration, timeout = 9999):
    '''
    Wartet solange, bis ein Punkt im bereich 'toleranceradius' mindestens 'duration' Sekunden fixiert wurde. Bricht nach 'timeout' Sekunden ab.
    '''
    _gazeProcessor.registerFixationEvent(point, toleranceradius, duration)
    waitFix  = viztask.waitEvent(_gazeProcessor.FIXPOINT_EVENT)
    waitTime = viztask.waitTime(timeout)
    yield viztask.waitAny([waitFix, waitTime])    


def setTrigger(triggerNum):
    '''Speichert in den Ausgabedaten den übergebenen Trigger ab.'''
    _gazeProcessor.setTrigger(triggerNum)
    

def loadGazeData(filename = None):
    '''
    Lädt gespeicherte gaze-daten.
    Da der Puffer nur alle 0.5sek geschrieben wird, müssen alle Daten wieder zusammengesetzt werden.
    Rückgabe: [(time, data/trigger)] 
    '''
    if not filename:
        filename = _dataName + ".pic"
    
    try:
        inp = open(filename, "rb")  #daten sind binär gespeichert
    except:
        return None
    
    allData = []
    while True:
        try:
            data = pickle.load(inp) #probiere nächsten abschnitt zu laden
        except EOFError:
            break
        except:
            import traceback;traceback.print_exc()
            break
        allData.extend(data)    #füge abschnitt allem bisherigen hinzu
    
    inp.close()
    return allData

